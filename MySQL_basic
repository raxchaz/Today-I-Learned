From = 집
Select = 방


--------------
SELECT 
    menu_name,
    menu_price,
    category_code
FROM
    tbl_menu

=> tbl_menu에서 menu_price, name/ category_code를 모두 조회한다.
---------------


>> 연산자 <<

01. ORDER_BY
= 결과 집합을 특정 열이나 열들의 값에 따라 정렬하는 데 사용
= ASC : 오름차순
= DESC : 내림차순
= FIELD : 맨 왼쪽의 값이 2번째 인자 이후의 값과 일치하면 해당 위치 값을 반환함
ex) SELECT FIELD('A', 'A', 'B', 'C'); => 2 반환


02. WHERE
= 특정 조건에 맞는 레코드만을 선택하는 데 사
SELECT 
    menu_name, 
    menu_price, 
    orderable_status
FROM
    tbl_menu
WHERE
    orderable_status = 'Y';


02-1. AND 연산자
0 반환 : 0이거나 NULL이 아닌 값들일 경우
1 반환 : 하나라도 0이거나 둘 다 0일 경우
NULL 반환 : 0이 아닌 값과 NULL // 둘 다 NULL일 경우
0이면 FALSE, 0이 아니면 TRUE, NULL은 NULL


02-2. OR 연산자
0 반환 : 둘 다 0일 경우
1 반환 : 둘 다 NULL이 아니면서 + 하나라도 0이 아닌 값이 있을 경우
NULL 반환 : 1을 제외한 값들 중 하나라도 NULL이거나 둘 다 NULL일 경우
0이면 FALSE, 0이 아니라면 TRUE, NULL은 NULL

우선순위 :  AND >>> OR
우선순위를 높이고 싶다면 소괄호를 사용하면 된다.


03. BETWEEN
SELECT 
    menu_name, 
    menu_price, 
    category_code
FROM
    tbl_menu
WHERE
    menu_price BETWEEN 10000 AND 25000
ORDER BY 
    menu_price;
부정을 하고싶을 경우에는, NOT BETWEEN이라고 표기


04. LIKE 연산자 
= 해당 문구가 포함되어있는 부분을 찾아준다!
부정하고 싶다면, NOT LIKE로 기재하면 된다. 
SELECT 
    menu_name, 
    menu_price
FROM
    tbl_menu
WHERE
    menu_name LIKE '%마늘%'
ORDER BY 
    menu_name;


05. IN 연산자
= LIKE과 마찬가지로 포함되어있는 부분을 보여준다.
SELECT 
    menu_name,
    category_code
FROM
    tbl_menu
WHERE
    category_code IN (4, 5, 6)
ORDER BY 
    category_code;


06. DISTINCT
= 중복된 값을 제거하는 데 사용된다.
- 단일열과 다중열(다중열이 모두 동일하면 중복이라고 판단)이 존재!


07. LIMIT
= 집합에서 반환할 행의 수를 제한하는 데 사용

SELECT
    select_list
FROM
    table_name
LIMIT [offset,] row_count;

- offset = 시작할 행의 번호(인덱스 체계)
- row_count = 이후 행부터 반환 받을 행의 개수

------------
SELECT
    menu_code,
    menu_name,
    menu_price
FROM
    tbl_menu
ORDER BY
    menu_price DESC


LIMIT 1, 4;
=> 2번 행부터 5번 행까지 조회한다!

LIMIT 5;
=> 상위 다섯 줄의 행만 조회한다! 
-------------


