- oopy로 노션 도메인 연결! < 참고 : https://www.oopy.io/
- 깃허브 템플릿 사용을 공부하는 이유 : 한 화면에서 내가 한 활동들을 정리할 수 있어서 추후 정리 & 확인에 용이

**ERD : 개체 관계 다이어그램 ★**

[DA#5](https://www.notion.so/DA-5-256a3fd3a5364f5e9752597d2540d193?pvs=21)

[ 데이터베이스 모델링 ]

1. 논리 모델 제작 (데이터 간의 규칙을 생각하지만, DBMS는 고려 X)
2. 물리 모델 제작 (DBMS 고려)
ㄴ 이 과정을 DA# 프로그램으로 전환 가능함

**DDL** : Data Definitaion Language
ㄴ 테이블의 구조를 구성하고 변경하고 삭제한다.  [Create, Alter, Drop]

**DML** : Data Manipulation Language
ㄴ 테이블의 구조가 정해져있는 상태에서 구조의 변화 없이 데이터의 변화만을 일으킨다. [Insert, Update, Delete]

> **DB 설계**
> 
1. 요구 조건 분석
2. 개념 설계
3. 논리 설계
4. 물리 설계
5. 데이터베이스 구축

---

Q. 모델링을 왜 해야 하는가?
A. 중복된 데이터를 피하고 데이터를 조금 더 효율적으로 저장하기 위함이다.


주 식별자 ⇒ 고유의 값이어야 하며, Null값이 들어가선 안된다.
인조 식별자 ⇒ 중복된 값이 포함되지 않도록 잘 관리해야 함


---

**FK = 외래키** (**참조하는 테이블과 참조되는 테이블의 관계**를 나타낸다.

ㄴ 예를 들어 학생 - 수업 테이블은 학생테이블과 수업테이블의 관계를 1:N으로 나타내기 위한 테이블이므로
학생테이블과 수업테이블을 참조하여 만들어야 한다. 그러기 위해서는 학생코드(pk) 수업코드(pk)로 테이블이 구성되는데 
**이렇게 다른 테이블의 정보를 참조하기 위한 학생코드와 수업코드는 학생_수업테이블 내에서의 FK**다.

**PK = 기본키** (**학생과 수업의 테이블에서 각 행의 정보들을 식별할 수 있는 정보**)
ㄴ 테이블 행의 여러 정보들 중 행을 식별할 수 있어야 하기 때문에 비어있으면 안 되고, 중복되어서도 안 된다. 
또한 식별할 때, 테이블의 정보를 최대한 빠르게 검색해야 하므로 간단한 정보일 수록 좋다.


-----

1. Entity
- 엔티티는 수학의 집합 이론에 근거한다.
- 집합은 객관적인 기준에 의해 그 원소를 명확히 구분할 수 있어햐 하며, 집합을 구성하는 개체들은 집합 내에서 유일하게 식별될 수 있어야 한다.
- 논리적인 개념 또한 집합의 구성 요소가 될 수 있다.

2. Entity 도출 과정
- 엔티티 후보 풀과 엔티티 리스트를 준비
- 분석 대상 문서를 보고 명사를 찾아낸다.
- 표시한 명사들을 엔티티인지 속성인지 구별한다.
  ㄴ 엔티티로 의심되는 명사인 경우, 엔티티 리스트에 기록
  ㄴ 속성으로 의심되는 명사인 경우, 엔티티 리스트의 포함 속성에 기록
  ㄴ 엔티티인지 속성인지 불분명할 경우, 엔티티 후보 풀에 기록
- 중복된 명사 혹은 유사한 의미의 명사를 정리한다.
- 엔티티 후보 풀에 있는 명사를 검토하여 엔티티 리스트 혹은 속성에 기록한다.





