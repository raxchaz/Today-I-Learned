MySQL

01. JOIN 
= 두 개 이상의 테이블을 관련있는 컬럼을 통해 결합하는 데 사용된다.
= 각 테이블은 반드시 연관있는 컬럼이 존재해야 하며, 이를 통해 JOIN된 테이블들의 컬럼 모두 활용 가능

* 컬럼 별칭
- resultSet의 컬럼명이 별칭으로 바뀜
- 별칭에 띄어쓰기 특수기호가 없다면, 홑따옴표와 AS는 생략 가능!

SELECT 
    menu_code AS 'code',
    menu_name AS name,
    menu_price 'price'
FROM
    tbl_menu
ORDER BY price;

------------------------------------------------------------------------------

* 테이블 별칭
- 어떤 테이블 소속인지를 쉽게 알 수 있어진다.
- 테이블 별칭은 AS를 써도 되고, 생략하는 것도 가능하다.

SELECT
    a.category_code,
    a.menu_name
FROM
    -- tbl_menu AS a
    tbl_menu a
ORDER BY 
    a.category_code,
    a.menu_name;


-------------------------------------------------------------------------------


JOIN의 종류

01. INNER JOIN
= 두 테이블의 교집합을 반환하는 SQL JOIN 유형
-> ON을 활용한 JOIN = 컬럼명이 같거나 다를 경우 
ON으로 서로 연관있는 컬럼에 대한 조건을 작성하여 JOIN하는 경우

SELECT 
    a.menu_name,
    b.category_name
FROM 
    tbl_menu a
-- INNER JOIN tbl_category b ON a.category_code = b.category_code;
JOIN tbl_category b ON a.category_code = b.category_code;

--------------------------------------------------------------------------------

02. USING을 활용한 JOIN
= 컬럼명이 같을 경우 USING으로 서로 연관있는 컬럼에 대한 조건을 작성하여 JOIN

SELECT 
    a.menu_name,
    b.category_name
FROM 
    tbl_menu a
INNER JOIN tbl_category b USING (category_code);

---------------------------------------------------------------------------------

03. LEFT JOIN
= 첫번째 테이블의 모든 레코드와 두번째 테이블에서 일치하는 레코드를 반환하는 SQL JOIN

SELECT 
    a.category_name,
    b.menu_name
FROM 
    tbl_category a
LEFT JOIN tbl_menu b ON a.category_code = b.category_code;

---------------------------------------------------------------------------------


04. RIGHT JOIN
= 두번째 테이블의 모든 레코드와 첫번째 테이블에서 일치하는 레코드를 반환하는 SQL JOIN

SELECT 
    a.menu_name,
    b.category_name
FROM 
    tbl_menu a
RIGHT JOIN tbl_category b ON a.category_code = b.category_code;


----------------------------------------------------------------------------------


05. CROSS JOIN
= 두 테이블의 모든 가능한 조합을 반환하는 SQL JOIN 유형

SELECT 
    a.menu_name,
    b.category_name
FROM 
    tbl_menu a
CROSS JOIN tbl_category b;


---------------------------------------------------------------------------------


06. SELF JOIN
= 같은 테이블 내에서 행과 행 사이의 관계를 찾기 위해 사용되는 SQL JOIN 유형
= 보통 카테고리 별 대분류 확인을 위한 SELF JOIN 조회

SELECT
    a.category_name,
    b.category_name
FROM 
    tbl_category a
JOIN tbl_category b ON a.ref_category_code = b.category_code
WHERE a.ref_category_code IS NOT NULL;


---------------------------------------------------------------------------------



>> JOIN 알고리즘 <<


01. NESTED LOOP JOIN = 중첩 루프 조인
- MySQL은 기본적으로 NESTED LOOP JOIN을 사용.
- 두 개 이상의 테이블에서 하나의 집합을 기준, 순차적으로 상대방 ROW를 결합하여 조합
- 중첩 반복문처럼 첫번째 테이블의 ROW()와 관련된 두번째 테이블에 대한 ROW를 검색하고, 
  이후 첫번째 테이블의 다음 ROW에 대해 두번째 테이블에 대한 것을 검색하며 이후 이와 같은 방식 반복!
- MySQL은 기본적으로 NESTED LOOP JOIN을 사용하지만, 이를 강제하려면 힌트절을 작성하여
  HASH JOIN을 사용하지 않도록 강제할 수 있다. 

** HASH JOIN? 
= HASH 조인은 조인 될 두 테이블 중 하나를 해시 테이블로 선정하여 
조인될 테이블의 조인 키 값을 해시 알고리즘으로 비교하여 매치되는 결과값을 얻는 방식

** MySQL에서 조인된다는 것의 의미는 무엇인가?
= 조인(Join)은 SELECT와 더불어 가장 많이 사용하는 옵션 중 하나이고, 
두 개 이상의 테이블을 묶어서 하나의 결과 집합으로 만들어 내는 것을 말한다.
즉, 서로 다른 테이블에서 데이터를 가져올 때 사용하는 것이 바로 조인!

SELECT /*+ NO_HASH_JOIN(a) */
    a.menu_name,
    b.category_name
FROM 
    tbl_menu a
JOIN tbl_category b ON a.category_code = b.category_code;



---------------------------------------------------------------------------------



02. HASH JOIN
= 조인될 두 테이블 중 하나를 해시 테이블로 선정하여서
조인될 테이블의 조인 키 값을 해시 알고리즘으로 비교하여 매치되는 결과값을 얻음!

- 대규모 데이터 세트에 대한 조인 연산을 효과적으로 진행할 수 있다.

- 해싱 단계에서 조인을 수행하는 두 테이블 중 작은 쪽을 선택하여 해시 테이블을 만들어 메모리에 저장하고,
  해시 함수를 사용해서 각 행(ROW)를 특정 '해시 버킷'에 할당한다.

- 조인 단계에서 다른 테이블을 순회하며 각 행에 대해 동일한 해시 함수를 사용하여 
  해당 행이 어떤 버킷에 속하는지 결정하고, 이 버킷의 모든 행과 해당 행을 비교해서 조인 조건을 만족시킨다.

- 이 방법은 조인할 테이블 중 하나가 메모리에 적합할만큼 작아야 한다. 
  그렇지 앟으면, 해시 테이블이 메모리를 넘어 디스크로까지 넘어가며 이는 성능 저하를 일으킴!

- HASH JOIN은 등가 조인에만 사용이 가능하며, 비등가 조인에는 사용할 수 없다는 특징을 가진다.
=> 여기서 등가 조인이란, '=' 연산자를 사용하는 조인을 이야기한다. 


SELECT /*+ HASH_JOIN(a) */
    a.menu_name,
    b.category_name
FROM
    tbl_menu a
JOIN tbl_category b ON a.category_code = b.category_code;
