다시 회귀해서 틀부터 바로 잡아보자!
지금 이 Til은 정말 틀을 이해하기 위한 목적입니다.

1. Language
2. Framework
3. Library

가장 넓고 얕은 범위의 언어, Language!


FrameWork란, 특정 프로그램을 개발하기 위한 여러 요소들과 메뉴얼인 "룰"을 제공하는 프로그램
즉! 하나의 프로그램을 제작하기 위해 꼭 사용해야 하는 요소와 지켜야되는 규약들을 말하는 것!
- Spring, Django, Ruby on Rails ..


Library란, 쉽게 말해 도구의 모음이다.
프레임워크라는 틀을 지킨다는 가정 하에, 그 안에서 내가 원하는 것을 만들기 위해서라면 어느 것도 가져다 써도 상관없다.
이는 소프트웨어를 개발하기 쉽게 만드는 기능을 제공하는 도구들을 말한다. 
java => JPA, MyBatis .. 


---------------------------


+ 데이터들이 프로그램이 종료되어도 사라지지 않고, 어떤 곳에 저장되는 개념을 영속성이라고 하는데
자바에서는 데이터들의 영속성을 위한 JDBC를 원래부터 지원해주고 있었음! 
근데 JDBC는 매핑 작업을 일일히 해줘야된다는 단점이 있어서 SQL Mapping, ORM이라는 영속성 프레임워크를 제작.
이때, SQL Mapping에 속하는 것이 MyBatis / ORM에 속하는 것이 JPA!

01. ORM 소속의 JPA
- 자바 ORM의 기술 표준이며, 대표적인 오픈 소스로 Hibernate.
ㄴ (하이버네트란, 자바 언어를 위한 ORM 프레임 워크이다. JPA 구현체로 JPA 인터페이스를 구현하고, 내부적으로는 JDBC API를 사용한다.)
- CRUD 메소드를 기본으로 제공해주며, 쿼리를 만들지 않아도 된다.
- 1차 캐싱, 쓰기 지연, 변경 감지, 지연 로딩을 제공한다. 
- 쿼리가 수정되어 데이터 정보가 변경되면 객체만 바꾸면 된다. 즉, 객체 중심으로 개발이 가능하다는 것!
- 그러나 복잡한 쿼리는 잘 해결하지 못함

02. SQL Mapping 소속의 MyBatis
- 자바에서 SQL Mapper를 지원해주는 프레임 워크
- SQL문을 이용해서 RDB에 접근하고 데이터를 객체화 시켜준다. 
- SQL문을 직접 작성하여 쿼리 수행 결과를 객체와 매핑시킨다.
- 쿼리문을 xml로 분리 가능하며, 데이터 캐싱 기능으로 성능을 향상 시킨다.
- 그러나 쿼리가 수정되었을 경우, 그에 사용되고 있던 DTO랑 객체 모두 변경해줘야 한다.
- 또한 CRUD 메소드를 직접 다 구현해야 한다. 


아니 그래서 ORM이 뭔데? ㅠㅠ
ORM은 객체와 DB테이블을 매핑시켜서 RDB(관계형데이터베이스)테이블을 객체지향적으로 사용하게 해주는 기술이야!

객체와 RDB를 별개로 설계하고, 중간에서 ORM이 매핑해주는 역할을 해
즉, ORM은 SQL문이 아닌 RDB 데이터 그 자체와 매핑하기 때문에 SQL을 직접 작성하지 않아도 되는 거지!
ㄴ (= 객체가 DB에 연결되기 대문에 SQL문을 직접 작성하지 않는다구)
RDB 테이블은 객체 지향적 특성이 없어서 Java와 같은 객체 지향적 언어로의 접근이 쉽지 않은데, 
이럴 때 ORM을 사용하면 보다 더 객체지향적으로 RDB를 사용할 수 있겠지? ㅎㅎㅎ

자바에서 대표적으로 사용하는 ORM은 JPA가 있고, 그의 구현체인 Hibernate가 있어
어쨌든, JPA는 ORM 기술에 의해 DB에서 조회한 데이터들이 객체로 연결되어 있고, 객체의 값을 수정하는 것은 결국 DB의 값을 수정하는 거라고 볼 수 있어 - 





